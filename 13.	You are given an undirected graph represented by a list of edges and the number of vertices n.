#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 100

bool graph[MAX_VERTICES][MAX_VERTICES];
int n;

bool isSafe(int v, int path[], int pos) {
    if (graph[path[pos - 1]][v] == 0)
        return false;

    for (int i = 0; i < pos; i++)
        if (path[i] == v)
            return false;

    return true;
}

bool hamiltonianCycleUtil(int path[], int pos) {
    if (pos == n) {
        if (graph[path[pos - 1]][path[0]] == 1)
            return true;
        else
            return false;
    }

    for (int v = 1; v < n; v++) {
        if (isSafe(v, path, pos)) {
            path[pos] = v;

            if (hamiltonianCycleUtil(path, pos + 1) == true)
                return true;

            path[pos] = -1;
        }
    }

    return false;
}

bool hasHamiltonianCycle(int edges[][2], int numVertices) {
    n = numVertices;

    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            graph[i][j] = 0;

    for (int i = 0; i < n; i++) {
        int u = edges[i][0];
        int v = edges[i][1];
        graph[u][v] = 1;
        graph[v][u] = 1;
    }

    int path[MAX_VERTICES];
    for (int i = 0; i < n; i++)
        path[i] = -1;

    path[0] = 0;

    if (hamiltonianCycleUtil(path, 1) == false)
        return false;

    return true;
}

int main() {
    int edges[][2] = {{0, 1}, {1, 2}, {2, 3}, {3, 0}, {0, 2}, {2, 4}, {4, 0}};
    int numVertices = 5;

    if (hasHamiltonianCycle(edges, numVertices))
        printf("Graph has a Hamiltonian cycle.");
    else
        printf("Graph does not have a Hamiltonian cycle.");

    return 0;
}
